//>>built
require({cache:{"xnode/main":function(){define(["dojo/_base/kernel","xnode/manager/NodeServiceManager","xnode/manager/NodeServiceManagerUI","xnode/views/NodeServiceView","xnode/component"],function(e){return e.xnode})},"xnode/manager/NodeServiceManager":function(){define("dcl/dcl xide/manager/ServerActionBase xide/manager/BeanManager xide/types xide/factory xide/data/Memory xide/client/WebSocket xdojo/has xide/factory/Clients xdojo/has!xnode-ui?./NodeServiceManagerUI".split(" "),function(e,d,k,l,
b,f,g,m,h,a){d=[d,k];a&&d.push(a);return e(d,{declaredClass:"xnode.manager.NodeServiceManager",serviceClass:"XIDE_NodeJS_Service",cookiePrefix:"nodeJSServices",singleton:!0,serviceView:null,clients:null,beanNamespace:"serviceConsoleView",consoles:{},createClient:function(a){if(a.info){this.clients||(this.clients={});var c=this.getViewId(a);if(this.clients[c])return this.clients[c];var b=new g({});this.clients[c]=b;b.init({options:{host:a.info.host,port:a.info.port,debug:{all:!1,protocol_connection:!0,
protocol_messages:!0,socket_server:!0,socket_client:!0,socket_messages:!0,main:!0}}});b.connect();return b}console.error("NodeJs service has no host infos")},getStore:function(){return this.store},isValid:function(){return null!=this.store},initStore:function(a){return this.store=new f({data:{identifier:"name",label:"Name",items:a},idProperty:"name"})},init:function(){return this.ls()},getDefaults:function(a){return this.callMethodEx(null,"getDefaults",null,a,!0)},checkServer:function(a,c){return this.callMethodEx(null,
"checkServer",[a],c,!0)},runServer:function(a,c){return this.callMethodEx(null,"runDebugServer",[a],c,!0)},runDebug:function(a,c){return this.callMethodEx(null,"run",[a],c,!0)},stopServer:function(a,c){return this.callMethodEx(null,"stop",[a],c,!0)},startServer:function(a,c){return this.callMethodEx(null,"start",[a],c,!0)},ls:function(a,c,b){var h=this;c=this.runDeferred(null,"ls");try{c.then(function(c){h.rawData=c;h.initStore(c);!1!==b&&h.publish(l.EVENTS.ON_NODE_SERVICE_STORE_READY,{store:h.store});
a&&a(c)})}catch(d){console.error("error loading store",d),logError(d,"error loading store")}return c}})})},"xnode/manager/NodeServiceManagerUI":function(){define("dcl/dcl dojo/_base/lang xide/encoding/MD5 xide/types xide/utils dojo/cookie dojo/json xdojo/has!xnode-ui?xide/views/ConsoleView xdojo/has!xnode-ui?xnode/views/NodeServiceView".split(" "),function(e,d,k,l,b,f,g,m,h){return e(null,{declaredClass:"xnode.manager.NodeServiceManagerUI",getViewId:function(a){return this.beanNamespace+k(JSON.stringify({info:a.info}),
1)},onConsoleEnter:function(a,b){if(0!=b.length){var c=a.view.client;d.isString(b)&&c.emit(null,b)}},createConsole:function(a,h,c){var d=this.getViewId(a);try{var e=b.addWidget(m,{delegate:this,title:a.name,closable:!0,style:"padding:0px;margin:0px;height:inherit",className:"runView",client:c,item:a},this,h,!0);this.consoles[d]=e;return c.delegate=e}catch(g){console.error(g)}},openConsole:function(a){this.getView(a);this.createConsole(a,this.getViewTarget(),this.createClient(a))},onReload:function(){this.ls(function(){this.serviceView.refresh(this.store)}.bind(this))},
loadPreferences:function(){var a=f(this.cookiePrefix+"_debug_settings");return a=a?g.parse(a):{}},savePreferences:function(a){f(this.cookiePrefix+"_debug_settings",g.stringify(a))},getViewTarget:function(){return this.ctx.getApplication().mainView.getNewAlternateTarget()},createServiceView:function(a,d){var c=d||this.getViewTarget();this.serviceView=b.addWidget(h,{delegate:this,store:a,title:"Services",closable:!0,style:"padding:0px"},this,c,!0)},openServiceView:function(){if(this.isValid())this.createServiceView(this.store);
else{var a=this;this.ls(function(){a.createServiceView(a.store)})}},onStart:function(a,b,c){a=[];for(c=0;c<b.length;c++)a.push(b[c].name);this.startServer(a,function(){this.onReload()}.bind(this))},onStop:function(a,b,c){a=[];for(c=0;c<b.length;c++)a.push(b[c].name);this.stopServer(a,function(){this.onReload()}.bind(this))},onMainMenuOpen:function(a){a=a.menu;a.serviceMenuItem||a.name!=l.MAIN_MENU_KEYS.VIEWS||(a.serviceMenuItem=new dijit.MenuItem({label:"Services",onClick:d.hitch(this,"openServiceView")}),
a.addChild(a.serviceMenuItem))},openServices:function(){this.openServiceView()},getActions:function(){return[]},init:function(){this.ctx.addActions(this.getActions())}})})},"xnode/views/NodeServiceView":function(){define("dcl/dcl dojo/_base/declare dgrid/OnDemandGrid dgrid/Selection xide/types xide/utils xaction/Action xide/layout/Container".split(" "),function(e,d,k,l,b,f,g,m){return e(m,{declaredClass:"xide.views.NodeServiceView",delegate:null,store:null,cssClass:"layoutContainer normalizedGridView",
createWidgets:function(b){b=new (d([k,l,"Keyboard"]))({collection:b,columns:{Name:{field:"name",label:"Name",sortable:!0},Status:{field:"status",label:"Status",sortable:!0,formatter:function(a){var b='\x3cdiv style\x3d"color:${color}"\x3e'+f.capitalize(a)+"\x3c/div\x3e";return f.substituteString(b,{color:"offline"==a?"red":"green"})}},Clients:{field:"clients",label:"Clients",sortable:!0}}},this.containerNode);b.refresh();this.grid=b;this.onGridCreated(b)},startup:function(){this.inherited(arguments);
this.store&&this.createWidgets(this.store)},hasItemActions:function(){return null!=this.getCurrentSelection(!0)},getItem:function(){return this.getCurrentSelection(!0)},getItemActions:function(){var d=this.getItem()[0],a=[],e=this.delegate,c=d.status===b.SERVICE_STATUS.ONLINE,f=d.status==b.SERVICE_STATUS.OFFLINE?"start":"stop",k=d.status==b.SERVICE_STATUS.OFFLINE?"Start":"Stop",f=g.createDefault(k,d.status==b.SERVICE_STATUS.OFFLINE?"el-icon-play":"el-icon-stop","Edit/"+k,"xnode",null,{handler:!1!==
d.can[f]?"start"==f?function(a,b,c){e.onStart(a,[d],c)}:function(a,c,b){e.onStop(a,[d],b)}:null}).setVisibility(b.ACTION_VISIBILITY.ACTION_TOOLBAR,{label:""}).setVisibility(b.ACTION_VISIBILITY.MAIN_MENU,{}).setVisibility(b.ACTION_VISIBILITY.CONTEXT_MENU,{});a.push(f);f=g.createDefault("Reload","fa-refresh","Edit/Reload","xnode",null,{handler:function(){e.onReload()}}).setVisibility(b.ACTION_VISIBILITY.ACTION_TOOLBAR,{label:""}).setVisibility(b.ACTION_VISIBILITY.MAIN_MENU,{}).setVisibility(b.ACTION_VISIBILITY.CONTEXT_MENU,
{});a.push(f);c=g.createDefault("Console","el-icon-indent-left","View/Console","xnode",null,{handler:function(){e.openConsole(d)},widgetArgs:{disabled:!c}}).setVisibility(b.ACTION_VISIBILITY.ACTION_TOOLBAR,{label:""}).setVisibility(b.ACTION_VISIBILITY.MAIN_MENU,{}).setVisibility(b.ACTION_VISIBILITY.CONTEXT_MENU,{});a.push(c);return 0==a.length?null:a}})})},"xnode/component":function(){define(["dojo/_base/declare","xide/model/Component"],function(e,d){return e([d],{beanType:"NODE_SERVICE",hasEditors:function(){return["xnode"]},
getDependencies:function(){return["xide/xide","xnode/types","xnode/manager/NodeServiceManager","xnode/views/NodeServiceView"]},getLabel:function(){return"xnode"},getBeanType:function(){return this.beanType}})})},"xnode/types":function(){define([],function(){return null})}}});
//# sourceMappingURL=xnode.js.map